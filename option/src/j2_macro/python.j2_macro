{%- macro requirements() %}
{%- if db_family == "oracle" %}
oracledb
{%- elif db_family == "mysql" %}
# 8.0.29 removed the support for Python 3.6 used
mysql-connector-python==8.0.28
{%- elif db_family == "psql" %}
psycopg2-binary
{%- elif db_family == "opensearch" %}
requests
{%- elif db_family == "nosql" %}
borneo
oci
{%- endif %}
{%- endmacro -%}

{%- macro import() %}
{%- if db_family == "oracle" %}
import oracledb
{%- elif db_family == "mysql" %}
import mysql.connector
{%- elif db_family == "psql" %}
import psycopg2
{%- elif db_family == "opensearch" %}
import requests
{%- elif db_family == "nosql" %}
from borneo import NoSQLHandle, NoSQLHandleConfig, Regions
from borneo.iam import SignatureProvider
from borneo import QueryRequest

# NoSQL connection  
def get_connection():
    {%- if deploy_type in ["compute", "kubernetes", "instance_pool"] %}
    provider = SignatureProvider.create_with_instance_principal()
    {%- else %}
    provider = SignatureProvider.create_with_resource_principal()
    {%- endif %}        
    config = NoSQLHandleConfig( os.getenv('TF_VAR_nosql_endpoint'), provider )
    config.set_default_compartment( os.getenv('TF_VAR_compartment_ocid') )
    {%- if deploy_type == "function" %}
    config.set_logger( None )
    {%- endif %}        
    return NoSQLHandle(config)
handle = get_connection()
{%- endif %}
{%- endmacro -%}

{%- macro dept() -%}
    {%- if db_family == "none" %}
    a = [ 
        { "deptno": "10", "dname": "ACCOUNTING", "loc": "Seoul"},
        { "deptno": "20", "dname": "RESEARCH", "loc": "Cape Town"},
        { "deptno": "30", "dname": "SALES", "loc": "Brussels"},
        { "deptno": "40", "dname": "OPERATIONS", "loc": "San Francisco"}
    ]
    {%- else %}
    a = []
    try:
        {%- if db_family == "oracle" %}
        conn = oracledb.connect(
          user=os.getenv('DB_USER'),
          password=os.getenv('DB_PASSWORD'),
          dsn=os.getenv('DB_URL'))
        {%- elif db_family == "mysql" %}
        db_url = os.getenv('DB_URL')
        mysql_host = db_url.split(':')[0]
        config = {
            "host": mysql_host,
            "port": 3306,
            "database": "db1",
            "user": os.getenv('DB_USER'),
            "password": os.getenv('DB_PASSWORD'),
            "charset": "utf8",
            "use_unicode": True,
            "get_warnings": True
        }    
        conn = mysql.connector.connect(**config)        
        {%- elif db_family == "psql" %}
        conn = psycopg2.connect(
            host=os.getenv('DB_URL'),
            database="postgres",
            user=os.getenv('DB_USER'),
            password=os.getenv('DB_PASSWORD'),
            sslmode='require' )
        {%- elif db_family == "opensearch" %}
        url = "https://"+os.getenv('DB_URL')+":9200/dept/_search?size=1000&scroll=1m&pretty=true"
        body = requests.get(url)
        j = body.json()
        print(j, flush=True)
        for hit in j["hits"]["hits"]:
            a.append( {"deptno": hit["_source"]["deptno"], "dname": hit["_source"]["dname"], "loc": hit["_source"]["loc"]} )
        {%- elif db_family == "nosql" %}
        request = QueryRequest().set_statement('select deptno, dname, loc from dept')
        while True: 
            result = handle.query_iterable(request)
            for row in result:
                a.append(row)
            if request.is_done(): break        
        {%- endif %}

        {%- if db_family != "opensearch" and db_family != "nosql" %}
        print("Successfully connected to database", flush=True)
        cursor = conn.cursor()
        cursor.execute("SELECT deptno, dname, loc FROM dept")
        deptRows = cursor.fetchall()
        for row in deptRows:
            a.append( {"deptno": row[0], "dname": row[1], "loc": row[2]} )        
        {%- endif %}
    except Exception as e:
        print(traceback.format_exc(), flush=True)
        print(e, flush=True)
    {%- if db_family != "opensearch" and db_family != "nosql" %}
    finally:
        cursor.close() 
        conn.close() 
    {%- endif %}
    {%- endif %}  
    print(a, flush=True) 
{%- endmacro -%}

